{"version":3,"file":"sustainability.context-_VZdRj2b.js","sources":["../../../assets/src/api/runtime.ts","../../../assets/src/api/models/ExternalResource.ts","../../../assets/src/api/models/ExternalResourceGroupResourcesInner.ts","../../../assets/src/api/models/ExternalResourceGroup.ts","../../../assets/src/api/models/SustainabilityResponseResourceGroupsInner.ts","../../../assets/src/api/models/SustainabilityResponse.ts","../../../assets/src/api/models/UmbracoSustainabilityApiV1SavePageDataPostRequest.ts","../../../assets/src/api/apis/SustainabilityApi.ts","../../../assets/src/repository/sources/sustainability.datasource.ts","../../../assets/src/repository/sustainability.repository.ts","../../../assets/src/context/sustainability.context.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Sustainability API\n * Umbraco.Community.Sustainability\n *\n * The version of the OpenAPI document: Latest\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport const BASE_PATH = \"http://localhost\".replace(/\\/+$/, \"\");\n\nexport interface ConfigurationParameters {\n    basePath?: string; // override base path\n    fetchApi?: FetchAPI; // override for fetch implementation\n    middleware?: Middleware[]; // middleware to apply before/after fetch requests\n    queryParamsStringify?: (params: HTTPQuery) => string; // stringify function for query strings\n    username?: string; // parameter for basic security\n    password?: string; // parameter for basic security\n    apiKey?: string | ((name: string) => string); // parameter for apiKey security\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string | Promise<string>); // parameter for oauth2 security\n    headers?: HTTPHeaders; //header params we want to use on every request\n    credentials?: RequestCredentials; //value for the credentials param we want to use on each request\n}\n\nexport class Configuration {\n    constructor(private configuration: ConfigurationParameters = {}) {}\n\n    set config(configuration: Configuration) {\n        this.configuration = configuration;\n    }\n\n    get basePath(): string {\n        return this.configuration.basePath != null ? this.configuration.basePath : BASE_PATH;\n    }\n\n    get fetchApi(): FetchAPI | undefined {\n        return this.configuration.fetchApi;\n    }\n\n    get middleware(): Middleware[] {\n        return this.configuration.middleware || [];\n    }\n\n    get queryParamsStringify(): (params: HTTPQuery) => string {\n        return this.configuration.queryParamsStringify || querystring;\n    }\n\n    get username(): string | undefined {\n        return this.configuration.username;\n    }\n\n    get password(): string | undefined {\n        return this.configuration.password;\n    }\n\n    get apiKey(): ((name: string) => string) | undefined {\n        const apiKey = this.configuration.apiKey;\n        if (apiKey) {\n            return typeof apiKey === 'function' ? apiKey : () => apiKey;\n        }\n        return undefined;\n    }\n\n    get accessToken(): ((name?: string, scopes?: string[]) => string | Promise<string>) | undefined {\n        const accessToken = this.configuration.accessToken;\n        if (accessToken) {\n            return typeof accessToken === 'function' ? accessToken : async () => accessToken;\n        }\n        return undefined;\n    }\n\n    get headers(): HTTPHeaders | undefined {\n        return this.configuration.headers;\n    }\n\n    get credentials(): RequestCredentials | undefined {\n        return this.configuration.credentials;\n    }\n}\n\nexport const DefaultConfig = new Configuration();\n\n/**\n * This is the base class for all generated API classes.\n */\nexport class BaseAPI {\n\n    private static readonly jsonRegex = new RegExp('^(:?application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(:?;.*)?$', 'i');\n    private middleware: Middleware[];\n\n    constructor(protected configuration = DefaultConfig) {\n        this.middleware = configuration.middleware;\n    }\n\n    withMiddleware<T extends BaseAPI>(this: T, ...middlewares: Middleware[]) {\n        const next = this.clone<T>();\n        next.middleware = next.middleware.concat(...middlewares);\n        return next;\n    }\n\n    withPreMiddleware<T extends BaseAPI>(this: T, ...preMiddlewares: Array<Middleware['pre']>) {\n        const middlewares = preMiddlewares.map((pre) => ({ pre }));\n        return this.withMiddleware<T>(...middlewares);\n    }\n\n    withPostMiddleware<T extends BaseAPI>(this: T, ...postMiddlewares: Array<Middleware['post']>) {\n        const middlewares = postMiddlewares.map((post) => ({ post }));\n        return this.withMiddleware<T>(...middlewares);\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    protected isJsonMime(mime: string | null | undefined): boolean {\n        if (!mime) {\n            return false;\n        }\n        return BaseAPI.jsonRegex.test(mime);\n    }\n\n    protected async request(context: RequestOpts, initOverrides?: RequestInit | InitOverrideFunction): Promise<Response> {\n        const { url, init } = await this.createFetchParams(context, initOverrides);\n        const response = await this.fetchApi(url, init);\n        if (response && (response.status >= 200 && response.status < 300)) {\n            return response;\n        }\n        throw new ResponseError(response, 'Response returned an error code');\n    }\n\n    private async createFetchParams(context: RequestOpts, initOverrides?: RequestInit | InitOverrideFunction) {\n        let url = this.configuration.basePath + context.path;\n        if (context.query !== undefined && Object.keys(context.query).length !== 0) {\n            // only add the querystring to the URL if there are query parameters.\n            // this is done to avoid urls ending with a \"?\" character which buggy webservers\n            // do not handle correctly sometimes.\n            url += '?' + this.configuration.queryParamsStringify(context.query);\n        }\n\n        const headers = Object.assign({}, this.configuration.headers, context.headers);\n        Object.keys(headers).forEach(key => headers[key] === undefined ? delete headers[key] : {});\n\n        const initOverrideFn =\n            typeof initOverrides === \"function\"\n                ? initOverrides\n                : async () => initOverrides;\n\n        const initParams = {\n            method: context.method,\n            headers,\n            body: context.body,\n            credentials: this.configuration.credentials,\n        };\n\n        const overriddenInit: RequestInit = {\n            ...initParams,\n            ...(await initOverrideFn({\n                init: initParams,\n                context,\n            }))\n        };\n\n        let body: any;\n        if (isFormData(overriddenInit.body)\n            || (overriddenInit.body instanceof URLSearchParams)\n            || isBlob(overriddenInit.body)) {\n          body = overriddenInit.body;\n        } else if (this.isJsonMime(headers['Content-Type'])) {\n          body = JSON.stringify(overriddenInit.body);\n        } else {\n          body = overriddenInit.body;\n        }\n\n        const init: RequestInit = {\n            ...overriddenInit,\n            body\n        };\n\n        return { url, init };\n    }\n\n    private fetchApi = async (url: string, init: RequestInit) => {\n        let fetchParams = { url, init };\n        for (const middleware of this.middleware) {\n            if (middleware.pre) {\n                fetchParams = await middleware.pre({\n                    fetch: this.fetchApi,\n                    ...fetchParams,\n                }) || fetchParams;\n            }\n        }\n        let response: Response | undefined = undefined;\n        try {\n            response = await (this.configuration.fetchApi || fetch)(fetchParams.url, fetchParams.init);\n        } catch (e) {\n            for (const middleware of this.middleware) {\n                if (middleware.onError) {\n                    response = await middleware.onError({\n                        fetch: this.fetchApi,\n                        url: fetchParams.url,\n                        init: fetchParams.init,\n                        error: e,\n                        response: response ? response.clone() : undefined,\n                    }) || response;\n                }\n            }\n            if (response === undefined) {\n              if (e instanceof Error) {\n                throw new FetchError(e, 'The request failed and the interceptors did not return an alternative response');\n              } else {\n                throw e;\n              }\n            }\n        }\n        for (const middleware of this.middleware) {\n            if (middleware.post) {\n                response = await middleware.post({\n                    fetch: this.fetchApi,\n                    url: fetchParams.url,\n                    init: fetchParams.init,\n                    response: response.clone(),\n                }) || response;\n            }\n        }\n        return response;\n    }\n\n    /**\n     * Create a shallow clone of `this` by constructing a new instance\n     * and then shallow cloning data members.\n     */\n    private clone<T extends BaseAPI>(this: T): T {\n        const constructor = this.constructor as any;\n        const next = new constructor(this.configuration);\n        next.middleware = this.middleware.slice();\n        return next;\n    }\n};\n\nfunction isBlob(value: any): value is Blob {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n\nfunction isFormData(value: any): value is FormData {\n    return typeof FormData !== \"undefined\" && value instanceof FormData;\n}\n\nexport class ResponseError extends Error {\n    override name: \"ResponseError\" = \"ResponseError\";\n    constructor(public response: Response, msg?: string) {\n        super(msg);\n    }\n}\n\nexport class FetchError extends Error {\n    override name: \"FetchError\" = \"FetchError\";\n    constructor(public cause: Error, msg?: string) {\n        super(msg);\n    }\n}\n\nexport class RequiredError extends Error {\n    override name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\nexport type FetchAPI = WindowOrWorkerGlobalScope['fetch'];\n\nexport type Json = any;\nexport type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';\nexport type HTTPHeaders = { [key: string]: string };\nexport type HTTPQuery = { [key: string]: string | number | null | boolean | Array<string | number | null | boolean> | Set<string | number | null | boolean> | HTTPQuery };\nexport type HTTPBody = Json | FormData | URLSearchParams;\nexport type HTTPRequestInit = { headers?: HTTPHeaders; method: HTTPMethod; credentials?: RequestCredentials; body?: HTTPBody };\nexport type ModelPropertyNaming = 'camelCase' | 'snake_case' | 'PascalCase' | 'original';\n\nexport type InitOverrideFunction = (requestContext: { init: HTTPRequestInit, context: RequestOpts }) => Promise<RequestInit>\n\nexport interface FetchParams {\n    url: string;\n    init: RequestInit;\n}\n\nexport interface RequestOpts {\n    path: string;\n    method: HTTPMethod;\n    headers: HTTPHeaders;\n    query?: HTTPQuery;\n    body?: HTTPBody;\n}\n\nexport function exists(json: any, key: string) {\n    const value = json[key];\n    return value !== null && value !== undefined;\n}\n\nexport function querystring(params: HTTPQuery, prefix: string = ''): string {\n    return Object.keys(params)\n        .map(key => querystringSingleKey(key, params[key], prefix))\n        .filter(part => part.length > 0)\n        .join('&');\n}\n\nfunction querystringSingleKey(key: string, value: string | number | null | undefined | boolean | Array<string | number | null | boolean> | Set<string | number | null | boolean> | HTTPQuery, keyPrefix: string = ''): string {\n    const fullKey = keyPrefix + (keyPrefix.length ? `[${key}]` : key);\n    if (value instanceof Array) {\n        const multiValue = value.map(singleValue => encodeURIComponent(String(singleValue)))\n            .join(`&${encodeURIComponent(fullKey)}=`);\n        return `${encodeURIComponent(fullKey)}=${multiValue}`;\n    }\n    if (value instanceof Set) {\n        const valueAsArray = Array.from(value);\n        return querystringSingleKey(key, valueAsArray, keyPrefix);\n    }\n    if (value instanceof Date) {\n        return `${encodeURIComponent(fullKey)}=${encodeURIComponent(value.toISOString())}`;\n    }\n    if (value instanceof Object) {\n        return querystring(value as HTTPQuery, fullKey);\n    }\n    return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;\n}\n\nexport function mapValues(data: any, fn: (item: any) => any) {\n  return Object.keys(data).reduce(\n    (acc, key) => ({ ...acc, [key]: fn(data[key]) }),\n    {}\n  );\n}\n\nexport function canConsumeForm(consumes: Consume[]): boolean {\n    for (const consume of consumes) {\n        if ('multipart/form-data' === consume.contentType) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport interface Consume {\n    contentType: string;\n}\n\nexport interface RequestContext {\n    fetch: FetchAPI;\n    url: string;\n    init: RequestInit;\n}\n\nexport interface ResponseContext {\n    fetch: FetchAPI;\n    url: string;\n    init: RequestInit;\n    response: Response;\n}\n\nexport interface ErrorContext {\n    fetch: FetchAPI;\n    url: string;\n    init: RequestInit;\n    error: unknown;\n    response?: Response;\n}\n\nexport interface Middleware {\n    pre?(context: RequestContext): Promise<FetchParams | void>;\n    post?(context: ResponseContext): Promise<Response | void>;\n    onError?(context: ErrorContext): Promise<Response | void>;\n}\n\nexport interface ApiResponse<T> {\n    raw: Response;\n    value(): Promise<T>;\n}\n\nexport interface ResponseTransformer<T> {\n    (json: any): T;\n}\n\nexport class JSONApiResponse<T> {\n    constructor(public raw: Response, private transformer: ResponseTransformer<T> = (jsonValue: any) => jsonValue) {}\n\n    async value(): Promise<T> {\n        return this.transformer(await this.raw.json());\n    }\n}\n\nexport class VoidApiResponse {\n    constructor(public raw: Response) {}\n\n    async value(): Promise<void> {\n        return undefined;\n    }\n}\n\nexport class BlobApiResponse {\n    constructor(public raw: Response) {}\n\n    async value(): Promise<Blob> {\n        return await this.raw.blob();\n    };\n}\n\nexport class TextApiResponse {\n    constructor(public raw: Response) {}\n\n    async value(): Promise<string> {\n        return await this.raw.text();\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Sustainability API\n * Umbraco.Community.Sustainability\n *\n * The version of the OpenAPI document: Latest\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\n/**\n * \n * @export\n * @interface ExternalResource\n */\nexport interface ExternalResource {\n    /**\n     * \n     * @type {string}\n     * @memberof ExternalResource\n     */\n    url?: string | null;\n    /**\n     * \n     * @type {number}\n     * @memberof ExternalResource\n     */\n    size: number;\n}\n\n/**\n * Check if a given object implements the ExternalResource interface.\n */\nexport function instanceOfExternalResource(value: object): boolean {\n    let isInstance = true;\n    isInstance = isInstance && \"size\" in value;\n\n    return isInstance;\n}\n\nexport function ExternalResourceFromJSON(json: any): ExternalResource {\n    return ExternalResourceFromJSONTyped(json, false);\n}\n\nexport function ExternalResourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExternalResource {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'url': !exists(json, 'url') ? undefined : json['url'],\n        'size': json['size'],\n    };\n}\n\nexport function ExternalResourceToJSON(value?: ExternalResource | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'url': value.url,\n        'size': value.size,\n    };\n}\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Sustainability API\n * Umbraco.Community.Sustainability\n *\n * The version of the OpenAPI document: Latest\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport type { ExternalResource } from './ExternalResource';\nimport {\n    instanceOfExternalResource,\n    ExternalResourceFromJSON,\n    ExternalResourceFromJSONTyped,\n    ExternalResourceToJSON,\n} from './ExternalResource';\n\n/**\n * @type ExternalResourceGroupResourcesInner\n * \n * @export\n */\nexport type ExternalResourceGroupResourcesInner = ExternalResource;\n\nexport function ExternalResourceGroupResourcesInnerFromJSON(json: any): ExternalResourceGroupResourcesInner {\n    return ExternalResourceGroupResourcesInnerFromJSONTyped(json, false);\n}\n\nexport function ExternalResourceGroupResourcesInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExternalResourceGroupResourcesInner {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return { ...ExternalResourceFromJSONTyped(json, true) };\n}\n\nexport function ExternalResourceGroupResourcesInnerToJSON(value?: ExternalResourceGroupResourcesInner | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n\n    if (instanceOfExternalResource(value)) {\n        return ExternalResourceToJSON(value as ExternalResource);\n    }\n\n    return {};\n}\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Sustainability API\n * Umbraco.Community.Sustainability\n *\n * The version of the OpenAPI document: Latest\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\nimport type { ExternalResourceGroupResourcesInner } from './ExternalResourceGroupResourcesInner';\nimport {\n    ExternalResourceGroupResourcesInnerFromJSON,\n    ExternalResourceGroupResourcesInnerFromJSONTyped,\n    ExternalResourceGroupResourcesInnerToJSON,\n} from './ExternalResourceGroupResourcesInner';\nimport type { ResourceGroupType } from './ResourceGroupType';\nimport {\n    ResourceGroupTypeFromJSON,\n    ResourceGroupTypeFromJSONTyped,\n    ResourceGroupTypeToJSON,\n} from './ResourceGroupType';\n\n/**\n * \n * @export\n * @interface ExternalResourceGroup\n */\nexport interface ExternalResourceGroup {\n    /**\n     * \n     * @type {ResourceGroupType}\n     * @memberof ExternalResourceGroup\n     */\n    type: ResourceGroupType;\n    /**\n     * \n     * @type {string}\n     * @memberof ExternalResourceGroup\n     */\n    name?: string | null;\n    /**\n     * \n     * @type {number}\n     * @memberof ExternalResourceGroup\n     */\n    totalSize: number;\n    /**\n     * \n     * @type {Array<ExternalResourceGroupResourcesInner>}\n     * @memberof ExternalResourceGroup\n     */\n    resources?: Array<ExternalResourceGroupResourcesInner> | null;\n}\n\n/**\n * Check if a given object implements the ExternalResourceGroup interface.\n */\nexport function instanceOfExternalResourceGroup(value: object): boolean {\n    let isInstance = true;\n    isInstance = isInstance && \"type\" in value;\n    isInstance = isInstance && \"totalSize\" in value;\n\n    return isInstance;\n}\n\nexport function ExternalResourceGroupFromJSON(json: any): ExternalResourceGroup {\n    return ExternalResourceGroupFromJSONTyped(json, false);\n}\n\nexport function ExternalResourceGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExternalResourceGroup {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'type': ResourceGroupTypeFromJSON(json['type']),\n        'name': !exists(json, 'name') ? undefined : json['name'],\n        'totalSize': json['totalSize'],\n        'resources': !exists(json, 'resources') ? undefined : (json['resources'] === null ? null : (json['resources'] as Array<any>).map(ExternalResourceGroupResourcesInnerFromJSON)),\n    };\n}\n\nexport function ExternalResourceGroupToJSON(value?: ExternalResourceGroup | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'type': ResourceGroupTypeToJSON(value.type),\n        'name': value.name,\n        'totalSize': value.totalSize,\n        'resources': value.resources === undefined ? undefined : (value.resources === null ? null : (value.resources as Array<any>).map(ExternalResourceGroupResourcesInnerToJSON)),\n    };\n}\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Sustainability API\n * Umbraco.Community.Sustainability\n *\n * The version of the OpenAPI document: Latest\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport type { ExternalResourceGroup } from './ExternalResourceGroup';\nimport {\n    instanceOfExternalResourceGroup,\n    ExternalResourceGroupFromJSON,\n    ExternalResourceGroupFromJSONTyped,\n    ExternalResourceGroupToJSON,\n} from './ExternalResourceGroup';\n\n/**\n * @type SustainabilityResponseResourceGroupsInner\n * \n * @export\n */\nexport type SustainabilityResponseResourceGroupsInner = ExternalResourceGroup;\n\nexport function SustainabilityResponseResourceGroupsInnerFromJSON(json: any): SustainabilityResponseResourceGroupsInner {\n    return SustainabilityResponseResourceGroupsInnerFromJSONTyped(json, false);\n}\n\nexport function SustainabilityResponseResourceGroupsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): SustainabilityResponseResourceGroupsInner {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return { ...ExternalResourceGroupFromJSONTyped(json, true) };\n}\n\nexport function SustainabilityResponseResourceGroupsInnerToJSON(value?: SustainabilityResponseResourceGroupsInner | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n\n    if (instanceOfExternalResourceGroup(value)) {\n        return ExternalResourceGroupToJSON(value as ExternalResourceGroup);\n    }\n\n    return {};\n}\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Sustainability API\n * Umbraco.Community.Sustainability\n *\n * The version of the OpenAPI document: Latest\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\nimport type { SustainabilityResponseResourceGroupsInner } from './SustainabilityResponseResourceGroupsInner';\nimport {\n    SustainabilityResponseResourceGroupsInnerFromJSON,\n    SustainabilityResponseResourceGroupsInnerFromJSONTyped,\n    SustainabilityResponseResourceGroupsInnerToJSON,\n} from './SustainabilityResponseResourceGroupsInner';\n\n/**\n * \n * @export\n * @interface SustainabilityResponse\n */\nexport interface SustainabilityResponse {\n    /**\n     * \n     * @type {Date}\n     * @memberof SustainabilityResponse\n     */\n    lastRunDate: Date;\n    /**\n     * \n     * @type {number}\n     * @memberof SustainabilityResponse\n     */\n    totalSize: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SustainabilityResponse\n     */\n    totalEmissions: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SustainabilityResponse\n     */\n    carbonRating?: string | null;\n    /**\n     * \n     * @type {Array<SustainabilityResponseResourceGroupsInner>}\n     * @memberof SustainabilityResponse\n     */\n    resourceGroups?: Array<SustainabilityResponseResourceGroupsInner> | null;\n}\n\n/**\n * Check if a given object implements the SustainabilityResponse interface.\n */\nexport function instanceOfSustainabilityResponse(value: object): boolean {\n    let isInstance = true;\n    isInstance = isInstance && \"lastRunDate\" in value;\n    isInstance = isInstance && \"totalSize\" in value;\n    isInstance = isInstance && \"totalEmissions\" in value;\n\n    return isInstance;\n}\n\nexport function SustainabilityResponseFromJSON(json: any): SustainabilityResponse {\n    return SustainabilityResponseFromJSONTyped(json, false);\n}\n\nexport function SustainabilityResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): SustainabilityResponse {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'lastRunDate': (new Date(json['lastRunDate'])),\n        'totalSize': json['totalSize'],\n        'totalEmissions': json['totalEmissions'],\n        'carbonRating': !exists(json, 'carbonRating') ? undefined : json['carbonRating'],\n        'resourceGroups': !exists(json, 'resourceGroups') ? undefined : (json['resourceGroups'] === null ? null : (json['resourceGroups'] as Array<any>).map(SustainabilityResponseResourceGroupsInnerFromJSON)),\n    };\n}\n\nexport function SustainabilityResponseToJSON(value?: SustainabilityResponse | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'lastRunDate': (value.lastRunDate.toISOString()),\n        'totalSize': value.totalSize,\n        'totalEmissions': value.totalEmissions,\n        'carbonRating': value.carbonRating,\n        'resourceGroups': value.resourceGroups === undefined ? undefined : (value.resourceGroups === null ? null : (value.resourceGroups as Array<any>).map(SustainabilityResponseResourceGroupsInnerToJSON)),\n    };\n}\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Sustainability API\n * Umbraco.Community.Sustainability\n *\n * The version of the OpenAPI document: Latest\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport type { SustainabilityResponse } from './SustainabilityResponse';\nimport {\n    instanceOfSustainabilityResponse,\n    SustainabilityResponseFromJSON,\n    SustainabilityResponseFromJSONTyped,\n    SustainabilityResponseToJSON,\n} from './SustainabilityResponse';\n\n/**\n * @type UmbracoSustainabilityApiV1SavePageDataPostRequest\n * \n * @export\n */\nexport type UmbracoSustainabilityApiV1SavePageDataPostRequest = SustainabilityResponse;\n\nexport function UmbracoSustainabilityApiV1SavePageDataPostRequestFromJSON(json: any): UmbracoSustainabilityApiV1SavePageDataPostRequest {\n    return UmbracoSustainabilityApiV1SavePageDataPostRequestFromJSONTyped(json, false);\n}\n\nexport function UmbracoSustainabilityApiV1SavePageDataPostRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UmbracoSustainabilityApiV1SavePageDataPostRequest {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return { ...SustainabilityResponseFromJSONTyped(json, true) };\n}\n\nexport function UmbracoSustainabilityApiV1SavePageDataPostRequestToJSON(value?: UmbracoSustainabilityApiV1SavePageDataPostRequest | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n\n    if (instanceOfSustainabilityResponse(value)) {\n        return SustainabilityResponseToJSON(value as SustainabilityResponse);\n    }\n\n    return {};\n}\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Sustainability API\n * Umbraco.Community.Sustainability\n *\n * The version of the OpenAPI document: Latest\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as runtime from '../runtime';\nimport type {\n  UmbracoSustainabilityApiV1SavePageDataPostRequest,\n} from '../models/index';\nimport {\n    UmbracoSustainabilityApiV1SavePageDataPostRequestFromJSON,\n    UmbracoSustainabilityApiV1SavePageDataPostRequestToJSON,\n} from '../models/index';\n\nexport interface UmbracoSustainabilityApiV1CheckPageGetRequest {\n    pageId?: number;\n}\n\nexport interface UmbracoSustainabilityApiV1GetPageDataGetRequest {\n    pageId?: number;\n}\n\nexport interface UmbracoSustainabilityApiV1SavePageDataPostOperationRequest {\n    pageId?: number;\n    umbracoSustainabilityApiV1SavePageDataPostRequest?: UmbracoSustainabilityApiV1SavePageDataPostRequest;\n}\n\n/**\n * \n */\nexport class SustainabilityApi extends runtime.BaseAPI {\n\n    /**\n     */\n    async umbracoSustainabilityApiV1CheckPageGetRaw(requestParameters: UmbracoSustainabilityApiV1CheckPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {\n        const queryParameters: any = {};\n\n        if (requestParameters.pageId !== undefined) {\n            queryParameters['pageId'] = requestParameters.pageId;\n        }\n\n        const headerParameters: runtime.HTTPHeaders = {};\n\n        const response = await this.request({\n            path: `/umbraco/sustainability/api/v1/checkPage`,\n            method: 'GET',\n            headers: headerParameters,\n            query: queryParameters,\n        }, initOverrides);\n\n        return new runtime.VoidApiResponse(response);\n    }\n\n    /**\n     */\n    async umbracoSustainabilityApiV1CheckPageGet(requestParameters: UmbracoSustainabilityApiV1CheckPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {\n        await this.umbracoSustainabilityApiV1CheckPageGetRaw(requestParameters, initOverrides);\n    }\n\n    /**\n     */\n    async umbracoSustainabilityApiV1GetPageDataGetRaw(requestParameters: UmbracoSustainabilityApiV1GetPageDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {\n        const queryParameters: any = {};\n\n        if (requestParameters.pageId !== undefined) {\n            queryParameters['pageId'] = requestParameters.pageId;\n        }\n\n        const headerParameters: runtime.HTTPHeaders = {};\n\n        const response = await this.request({\n            path: `/umbraco/sustainability/api/v1/getPageData`,\n            method: 'GET',\n            headers: headerParameters,\n            query: queryParameters,\n        }, initOverrides);\n\n        if (this.isJsonMime(response.headers.get('content-type'))) {\n            return new runtime.JSONApiResponse<string>(response);\n        } else {\n            return new runtime.TextApiResponse(response) as any;\n        }\n    }\n\n    /**\n     */\n    async umbracoSustainabilityApiV1GetPageDataGet(requestParameters: UmbracoSustainabilityApiV1GetPageDataGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {\n        const response = await this.umbracoSustainabilityApiV1GetPageDataGetRaw(requestParameters, initOverrides);\n        return await response.value();\n    }\n\n    /**\n     */\n    async umbracoSustainabilityApiV1SavePageDataPostRaw(requestParameters: UmbracoSustainabilityApiV1SavePageDataPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {\n        const queryParameters: any = {};\n\n        if (requestParameters.pageId !== undefined) {\n            queryParameters['pageId'] = requestParameters.pageId;\n        }\n\n        const headerParameters: runtime.HTTPHeaders = {};\n\n        headerParameters['Content-Type'] = 'application/json';\n\n        const response = await this.request({\n            path: `/umbraco/sustainability/api/v1/savePageData`,\n            method: 'POST',\n            headers: headerParameters,\n            query: queryParameters,\n            body: UmbracoSustainabilityApiV1SavePageDataPostRequestToJSON(requestParameters.umbracoSustainabilityApiV1SavePageDataPostRequest),\n        }, initOverrides);\n\n        return new runtime.VoidApiResponse(response);\n    }\n\n    /**\n     */\n    async umbracoSustainabilityApiV1SavePageDataPost(requestParameters: UmbracoSustainabilityApiV1SavePageDataPostOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {\n        await this.umbracoSustainabilityApiV1SavePageDataPostRaw(requestParameters, initOverrides);\n    }\n\n}\n","import { UmbControllerHost } from \"@umbraco-cms/backoffice/controller-api\";\r\nimport { DataSourceResponse } from \"@umbraco-cms/backoffice/repository\";\r\nimport { tryExecuteAndNotify } from '@umbraco-cms/backoffice/resources';\r\nimport { Configuration, SustainabilityApi, UmbracoSustainabilityApiV1SavePageDataPostRequest } from \"../../api\";\r\n\r\nexport interface SustainabilityDataSource {\r\n\r\n  checkPage(pageId: number): Promise<DataSourceResponse<void>>;\r\n  getPageData(pageId: number): Promise<DataSourceResponse<string>>;\r\n  savePageData(pageId: number, sustainabilityResponse: UmbracoSustainabilityApiV1SavePageDataPostRequest): Promise<DataSourceResponse<void>>;\r\n\r\n}\r\n\r\nexport class SustainabilityManagementDataSource implements SustainabilityDataSource {\r\n\r\n  #host: UmbControllerHost;\r\n  sustainabilityApi: SustainabilityApi;\r\n\r\n  constructor(host: UmbControllerHost, configuration: Configuration) {\r\n    this.#host = host;\r\n    this.sustainabilityApi = new SustainabilityApi(configuration);\r\n  }\r\n\r\n  async checkPage(pageId: number): Promise<DataSourceResponse<void>> {\r\n    return await tryExecuteAndNotify(this.#host, this.sustainabilityApi.umbracoSustainabilityApiV1CheckPageGet({ pageId: pageId }));\r\n  }\r\n\r\n  async getPageData(pageId: number): Promise<DataSourceResponse<string>> {\r\n    return await tryExecuteAndNotify(this.#host, this.sustainabilityApi.umbracoSustainabilityApiV1GetPageDataGet({ pageId: pageId }));\r\n  }\r\n\r\n  async savePageData(pageId: number, sustainabilityResponse: UmbracoSustainabilityApiV1SavePageDataPostRequest): Promise<DataSourceResponse<void>> {\r\n    return await tryExecuteAndNotify(this.#host, this.sustainabilityApi.umbracoSustainabilityApiV1SavePageDataPost({\r\n      pageId: pageId,\r\n      umbracoSustainabilityApiV1SavePageDataPostRequest: sustainabilityResponse\r\n    }))\r\n  }\r\n\r\n}","import { UmbBaseController } from \"@umbraco-cms/backoffice/class-api\";\r\nimport { UmbControllerHost } from \"@umbraco-cms/backoffice/controller-api\";\r\nimport { SustainabilityManagementDataSource } from \"./sources/sustainability.datasource\";\r\nimport { Configuration, UmbracoSustainabilityApiV1SavePageDataPostRequest } from \"../api\";\r\n\r\nexport class SustainabilityManagementRepository extends UmbBaseController {\r\n  #sustainabilityDataSource: SustainabilityManagementDataSource;\r\n\r\n  constructor(host: UmbControllerHost, configuration: Configuration) {\r\n    super(host);\r\n    this.#sustainabilityDataSource = new SustainabilityManagementDataSource(this, configuration);\r\n\r\n    console.log('repository constructor');\r\n  }\r\n\r\n  async checkPage(pageId: number) {\r\n    return this.#sustainabilityDataSource.checkPage(pageId);\r\n  }\r\n\r\n  async getPageData(pageId: number) {\r\n    return this.#sustainabilityDataSource.getPageData(pageId);\r\n  }\r\n\r\n  async savePageData(pageId: number, sustainabilityResponse: UmbracoSustainabilityApiV1SavePageDataPostRequest) {\r\n    return this.#sustainabilityDataSource.savePageData(pageId, sustainabilityResponse);\r\n  }\r\n}","import { UmbBaseController } from \"@umbraco-cms/backoffice/class-api\";\r\nimport { SustainabilityManagementRepository } from \"../repository/sustainability.repository\";\r\nimport { UmbContextToken } from \"@umbraco-cms/backoffice/context-api\";\r\nimport { Configuration } from \"../api\";\r\n\r\nimport { UmbControllerHost } from \"@umbraco-cms/backoffice/controller-api\";\r\nimport { UMB_AUTH_CONTEXT } from '@umbraco-cms/backoffice/auth'\r\nimport { UmbStringState } from \"@umbraco-cms/backoffice/observable-api\";\r\n\r\nexport class SustainabilityManagementContext extends UmbBaseController {\r\n  \r\n  #repository: SustainabilityManagementRepository;\r\n  _configuration!: Configuration;\r\n\r\n  #pageData = new UmbStringState(\"unknown\");\r\n  public readonly pageData = this.#pageData.asObservable();\r\n\r\n  constructor(host: UmbControllerHost) {\r\n    super(host);\r\n\r\n    this.provideContext(SUSTAINABILITY_MANAGEMENT_CONTEXT_TOKEN, this);\r\n    \r\n    this.consumeContext(UMB_AUTH_CONTEXT, (_auth) => {\r\n      this._configuration = new Configuration({ accessToken: _auth.getLatestToken() });\r\n    });\r\n\r\n    this.#repository = new SustainabilityManagementRepository(this, this._configuration);\r\n  }\r\n\r\n  async getPageData(pageId: number) {\r\n    const { data } = await this.#repository.getPageData(pageId);\r\n    if (data) {\r\n      this.#pageData.setValue(data);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default SustainabilityManagementContext;\r\n\r\nexport const SUSTAINABILITY_MANAGEMENT_CONTEXT_TOKEN = new UmbContextToken<SustainabilityManagementContext>(SustainabilityManagementContext.name);"],"names":["BASE_PATH","Configuration","configuration","querystring","apiKey","accessToken","DefaultConfig","_BaseAPI","url","init","fetchParams","middleware","response","e","FetchError","middlewares","next","preMiddlewares","pre","postMiddlewares","post","mime","context","initOverrides","ResponseError","headers","key","initOverrideFn","initParams","overriddenInit","body","isFormData","isBlob","constructor","BaseAPI","value","msg","cause","params","prefix","querystringSingleKey","part","keyPrefix","fullKey","multiValue","singleValue","valueAsArray","JSONApiResponse","raw","transformer","jsonValue","VoidApiResponse","TextApiResponse","instanceOfExternalResource","isInstance","ExternalResourceToJSON","ExternalResourceGroupResourcesInnerToJSON","instanceOfExternalResourceGroup","ExternalResourceGroupToJSON","SustainabilityResponseResourceGroupsInnerToJSON","instanceOfSustainabilityResponse","SustainabilityResponseToJSON","UmbracoSustainabilityApiV1SavePageDataPostRequestToJSON","SustainabilityApi","runtime.BaseAPI","requestParameters","queryParameters","headerParameters","runtime.VoidApiResponse","runtime.JSONApiResponse","runtime.TextApiResponse","SustainabilityManagementDataSource","host","__privateAdd","_host","__privateSet","pageId","tryExecuteAndNotify","__privateGet","sustainabilityResponse","SustainabilityManagementRepository","UmbBaseController","_sustainabilityDataSource","SustainabilityManagementContext","_repository","_pageData","UmbStringState","SUSTAINABILITY_MANAGEMENT_CONTEXT_TOKEN","UMB_AUTH_CONTEXT","_auth","data","UmbContextToken"],"mappings":"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"}