{"version":3,"file":"sustainability.context-Db2dXv8K.js","sources":["../../../assets/src/repository/sources/sustainability.datasource.ts","../../../assets/src/repository/sustainability.repository.ts","../../../assets/src/context/sustainability.context.ts"],"sourcesContent":["import { UmbControllerHost } from \"@umbraco-cms/backoffice/controller-api\";\r\nimport { UmbDataSourceResponse } from \"@umbraco-cms/backoffice/repository\";\r\nimport { tryExecuteAndNotify } from '@umbraco-cms/backoffice/resources';\r\nimport { SustainabilityService, type SustainabilityResponse, DirectionModel, PagedResultPageMetricModel, AveragePageMetrics } from \"@api\";\r\n\r\nexport interface SustainabilityDataSource {\r\n\r\n  checkPage(pageGuid: string): Promise<UmbDataSourceResponse<SustainabilityResponse>>;\r\n  getPageData(pageGuid: string): Promise<UmbDataSourceResponse<SustainabilityResponse>>;\r\n  savePageData(pageGuid: string, sustainabilityResponse: SustainabilityResponse): Promise<UmbDataSourceResponse<boolean>>;\r\n  getOverviewData(direction: DirectionModel, orderBy: string, pageNumber: number, pageSize: number): Promise<UmbDataSourceResponse<PagedResultPageMetricModel>>;\r\n  getAverageData(): Promise<UmbDataSourceResponse<AveragePageMetrics>>;\r\n\r\n}\r\n\r\nexport class SustainabilityManagementDataSource implements SustainabilityDataSource {\r\n\r\n  #host: UmbControllerHost;\r\n\r\n  constructor(host: UmbControllerHost) {\r\n    this.#host = host;\r\n  }\r\n\r\n  async checkPage(pageGuid: string): Promise<UmbDataSourceResponse<SustainabilityResponse>> {\r\n    return await tryExecuteAndNotify(this.#host, SustainabilityService.checkPage({ pageGuid: pageGuid }));\r\n  }\r\n\r\n  async getPageData(pageGuid: string): Promise<UmbDataSourceResponse<SustainabilityResponse>> {\r\n    return await tryExecuteAndNotify(this.#host, SustainabilityService.getPageData({ pageGuid: pageGuid }));\r\n  }\r\n\r\n  async savePageData(pageGuid: string, sustainabilityResponse: SustainabilityResponse): Promise<UmbDataSourceResponse<boolean>> {\r\n    return await tryExecuteAndNotify(this.#host, SustainabilityService.savePageData({\r\n      pageGuid: pageGuid,\r\n      requestBody: sustainabilityResponse\r\n    }))\r\n  }\r\n\r\n  async getOverviewData(direction: DirectionModel, orderBy: string, pageNumber: number, pageSize: number): Promise<UmbDataSourceResponse<PagedResultPageMetricModel>> {\r\n    return await tryExecuteAndNotify(this.#host, SustainabilityService.getOverviewData({ direction, orderBy, pageNumber, pageSize }));\r\n  }\r\n\r\n  async getAverageData(): Promise<UmbDataSourceResponse<AveragePageMetrics>> {\r\n    return await tryExecuteAndNotify(this.#host, SustainabilityService.getAverageData());\r\n  }\r\n\r\n}\r\n","import { UmbControllerBase } from \"@umbraco-cms/backoffice/class-api\";\r\nimport { UmbControllerHost } from \"@umbraco-cms/backoffice/controller-api\";\r\nimport { SustainabilityManagementDataSource } from \"./sources/sustainability.datasource\";\r\nimport { DirectionModel, SustainabilityResponse } from \"@api\";\r\n\r\nexport class SustainabilityManagementRepository extends UmbControllerBase {\r\n  #sustainabilityDataSource: SustainabilityManagementDataSource;\r\n\r\n  constructor(host: UmbControllerHost) {\r\n    super(host);\r\n    this.#sustainabilityDataSource = new SustainabilityManagementDataSource(this);\r\n  }\r\n\r\n  async checkPage(pageGuid: string) {\r\n    return await this.#sustainabilityDataSource.checkPage(pageGuid);\r\n  }\r\n\r\n  async getPageData(pageGuid: string) {\r\n    return await this.#sustainabilityDataSource.getPageData(pageGuid);\r\n  }\r\n\r\n  async savePageData(pageGuid: string, sustainabilityResponse: SustainabilityResponse) {\r\n    return await this.#sustainabilityDataSource.savePageData(pageGuid, sustainabilityResponse);\r\n  }\r\n\r\n  async getOverviewData(direction: DirectionModel, orderBy: string, pageNumber: number, pageSize: number) {\r\n    return await this.#sustainabilityDataSource.getOverviewData(direction, orderBy, pageNumber, pageSize);\r\n  }\r\n\r\n  async getAverageData() {\r\n    return await this.#sustainabilityDataSource.getAverageData();\r\n  }\r\n}\r\n","import { UmbControllerBase } from \"@umbraco-cms/backoffice/class-api\";\r\nimport { SustainabilityManagementRepository } from \"../repository/sustainability.repository\";\r\nimport { UmbContextToken } from \"@umbraco-cms/backoffice/context-api\";\r\n\r\nimport { UmbControllerHost } from \"@umbraco-cms/backoffice/controller-api\";\r\nimport { UmbObjectState } from \"@umbraco-cms/backoffice/observable-api\";\r\n\r\nimport { UMB_AUTH_CONTEXT } from '@umbraco-cms/backoffice/auth'\r\nimport { AveragePageMetrics, DirectionModel, OpenAPI, SustainabilityResponse } from \"@api\";\r\n\r\nexport class SustainabilityManagementContext extends UmbControllerBase {\r\n  \r\n  #repository: SustainabilityManagementRepository;\r\n\r\n  #pageData = new UmbObjectState<SustainabilityResponse | undefined>(undefined);\r\n  public readonly pageData = this.#pageData.asObservable();\r\n\r\n  #averageData = new UmbObjectState<AveragePageMetrics | undefined>(undefined);\r\n  public readonly averageData = this.#averageData.asObservable();\r\n\r\n  constructor(host: UmbControllerHost) {\r\n    super(host);\r\n\r\n    this.provideContext(SUSTAINABILITY_MANAGEMENT_CONTEXT_TOKEN, this);\r\n    this.#repository = new SustainabilityManagementRepository(this);\r\n    \r\n    this.consumeContext(UMB_AUTH_CONTEXT, (_auth) => {\r\n      OpenAPI.TOKEN = () => _auth.getLatestToken();\r\n      OpenAPI.WITH_CREDENTIALS = true;\r\n    });\r\n\r\n  }\r\n\r\n  async checkPage(pageGuid: string, initialLoad: boolean = true) {\r\n    const { data } = await this.#repository.checkPage(pageGuid);\r\n    if (data) {\r\n      this.#pageData.setValue(data);\r\n\r\n      if (!initialLoad) {\r\n        await this.savePageData(pageGuid, data);\r\n      }\r\n    }\r\n  }\r\n\r\n  async getPageData(pageGuid: string, initialLoad: boolean = true) {\r\n    const { data } = await this.#repository.getPageData(pageGuid);\r\n    if (data) {\r\n      this.#pageData.setValue(data);\r\n\r\n      if (!initialLoad) {\r\n        await this.savePageData(pageGuid, data);\r\n      }\r\n    }\r\n  }\r\n  \r\n  async savePageData(pageGuid: string, sustainabilityResponse: SustainabilityResponse) {\r\n    const saved = await this.#repository.savePageData(pageGuid, sustainabilityResponse);\r\n    return saved;\r\n  }\r\n\r\n  async getAverageData() {\r\n    const { data } = await this.#repository.getAverageData();\r\n    if (data) {\r\n      this.#averageData.setValue(data);\r\n    }\r\n  }\r\n  \r\n}\r\n\r\nexport default SustainabilityManagementContext;\r\n\r\nexport const SUSTAINABILITY_MANAGEMENT_CONTEXT_TOKEN = new UmbContextToken<SustainabilityManagementContext>(SustainabilityManagementContext.name);\r\n"],"names":["SustainabilityManagementDataSource","host","__privateAdd","_host","__privateSet","pageGuid","tryExecuteAndNotify","__privateGet","SustainabilityService","sustainabilityResponse","direction","orderBy","pageNumber","pageSize","SustainabilityManagementRepository","UmbControllerBase","_sustainabilityDataSource","SustainabilityManagementContext","_repository","_pageData","_averageData","UmbObjectState","SUSTAINABILITY_MANAGEMENT_CONTEXT_TOKEN","UMB_AUTH_CONTEXT","_auth","OpenAPI","initialLoad","data","UmbContextToken"],"mappings":"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"}