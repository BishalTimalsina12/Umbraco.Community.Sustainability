{"version":3,"file":"sustainability-overview.element-w_3pzn_S.js","sources":["../../../assets/node_modules/@tgwf/co2/dist/esm/helpers/index.js","../../../assets/node_modules/@tgwf/co2/dist/esm/hosting-api.js","../../../assets/node_modules/@tgwf/co2/dist/esm/hosting.js","../../../assets/src/dashboards/views/sustainability-overview.element.ts"],"sourcesContent":["import { averageIntensity } from \"../index.js\";\nimport {\n  GLOBAL_GRID_INTENSITY,\n  PERCENTAGE_OF_DATA_LOADED_ON_SUBSEQUENT_LOAD,\n  FIRST_TIME_VIEWING_PERCENTAGE,\n  RETURNING_VISITOR_PERCENTAGE\n} from \"../constants/index.js\";\nconst formatNumber = (num) => parseFloat(num.toFixed(2));\nfunction parseOptions(options) {\n  var _a, _b, _c, _d, _e, _f;\n  if (typeof options !== \"object\") {\n    throw new Error(\"Options must be an object\");\n  }\n  const adjustments = {};\n  if (options == null ? void 0 : options.gridIntensity) {\n    adjustments.gridIntensity = {};\n    const { device, dataCenter, network } = options.gridIntensity;\n    if (device || device === 0) {\n      if (typeof device === \"object\") {\n        if (!averageIntensity.data[(_a = device.country) == null ? void 0 : _a.toUpperCase()]) {\n          console.warn(`\"${device.country}\" is not a valid country. Please use a valid 3 digit ISO 3166 country code. \nSee https://developers.thegreenwebfoundation.org/co2js/data/ for more information. \nFalling back to global average grid intensity.`);\n          adjustments.gridIntensity[\"device\"] = {\n            value: GLOBAL_GRID_INTENSITY\n          };\n        }\n        adjustments.gridIntensity[\"device\"] = {\n          country: device.country,\n          value: parseFloat(averageIntensity.data[(_b = device.country) == null ? void 0 : _b.toUpperCase()])\n        };\n      } else if (typeof device === \"number\") {\n        adjustments.gridIntensity[\"device\"] = {\n          value: device\n        };\n      } else {\n        adjustments.gridIntensity[\"device\"] = {\n          value: GLOBAL_GRID_INTENSITY\n        };\n        console.warn(`The device grid intensity must be a number or an object. You passed in a ${typeof device}. \nFalling back to global average grid intensity.`);\n      }\n    }\n    if (dataCenter || dataCenter === 0) {\n      if (typeof dataCenter === \"object\") {\n        if (!averageIntensity.data[(_c = dataCenter.country) == null ? void 0 : _c.toUpperCase()]) {\n          console.warn(`\"${dataCenter.country}\" is not a valid country. Please use a valid 3 digit ISO 3166 country code. \nSee https://developers.thegreenwebfoundation.org/co2js/data/ for more information.  \nFalling back to global average grid intensity.`);\n          adjustments.gridIntensity[\"dataCenter\"] = {\n            value: GLOBAL_GRID_INTENSITY\n          };\n        }\n        adjustments.gridIntensity[\"dataCenter\"] = {\n          country: dataCenter.country,\n          value: parseFloat(averageIntensity.data[(_d = dataCenter.country) == null ? void 0 : _d.toUpperCase()])\n        };\n      } else if (typeof dataCenter === \"number\") {\n        adjustments.gridIntensity[\"dataCenter\"] = {\n          value: dataCenter\n        };\n      } else {\n        adjustments.gridIntensity[\"dataCenter\"] = {\n          value: GLOBAL_GRID_INTENSITY\n        };\n        console.warn(`The data center grid intensity must be a number or an object. You passed in a ${typeof dataCenter}. \nFalling back to global average grid intensity.`);\n      }\n    }\n    if (network || network === 0) {\n      if (typeof network === \"object\") {\n        if (!averageIntensity.data[(_e = network.country) == null ? void 0 : _e.toUpperCase()]) {\n          console.warn(`\"${network.country}\" is not a valid country. Please use a valid 3 digit ISO 3166 country code. \nSee https://developers.thegreenwebfoundation.org/co2js/data/ for more information.  Falling back to global average grid intensity. \nFalling back to global average grid intensity.`);\n          adjustments.gridIntensity[\"network\"] = {\n            value: GLOBAL_GRID_INTENSITY\n          };\n        }\n        adjustments.gridIntensity[\"network\"] = {\n          country: network.country,\n          value: parseFloat(averageIntensity.data[(_f = network.country) == null ? void 0 : _f.toUpperCase()])\n        };\n      } else if (typeof network === \"number\") {\n        adjustments.gridIntensity[\"network\"] = {\n          value: network\n        };\n      } else {\n        adjustments.gridIntensity[\"network\"] = {\n          value: GLOBAL_GRID_INTENSITY\n        };\n        console.warn(`The network grid intensity must be a number or an object. You passed in a ${typeof network}. \nFalling back to global average grid intensity.`);\n      }\n    }\n  }\n  if ((options == null ? void 0 : options.dataReloadRatio) || options.dataReloadRatio === 0) {\n    if (typeof options.dataReloadRatio === \"number\") {\n      if (options.dataReloadRatio >= 0 && options.dataReloadRatio <= 1) {\n        adjustments.dataReloadRatio = options.dataReloadRatio;\n      } else {\n        adjustments.dataReloadRatio = PERCENTAGE_OF_DATA_LOADED_ON_SUBSEQUENT_LOAD;\n        console.warn(`The dataReloadRatio option must be a number between 0 and 1. You passed in ${options.dataReloadRatio}. \nFalling back to default value.`);\n      }\n    } else {\n      adjustments.dataReloadRatio = PERCENTAGE_OF_DATA_LOADED_ON_SUBSEQUENT_LOAD;\n      console.warn(`The dataReloadRatio option must be a number. You passed in a ${typeof options.dataReloadRatio}. \nFalling back to default value.`);\n    }\n  }\n  if ((options == null ? void 0 : options.firstVisitPercentage) || options.firstVisitPercentage === 0) {\n    if (typeof options.firstVisitPercentage === \"number\") {\n      if (options.firstVisitPercentage >= 0 && options.firstVisitPercentage <= 1) {\n        adjustments.firstVisitPercentage = options.firstVisitPercentage;\n      } else {\n        adjustments.firstVisitPercentage = FIRST_TIME_VIEWING_PERCENTAGE;\n        console.warn(`The firstVisitPercentage option must be a number between 0 and 1. You passed in ${options.firstVisitPercentage}. \nFalling back to default value.`);\n      }\n    } else {\n      adjustments.firstVisitPercentage = FIRST_TIME_VIEWING_PERCENTAGE;\n      console.warn(`The firstVisitPercentage option must be a number. You passed in a ${typeof options.firstVisitPercentage}. \nFalling back to default value.`);\n    }\n  }\n  if ((options == null ? void 0 : options.returnVisitPercentage) || options.returnVisitPercentage === 0) {\n    if (typeof options.returnVisitPercentage === \"number\") {\n      if (options.returnVisitPercentage >= 0 && options.returnVisitPercentage <= 1) {\n        adjustments.returnVisitPercentage = options.returnVisitPercentage;\n      } else {\n        adjustments.returnVisitPercentage = RETURNING_VISITOR_PERCENTAGE;\n        console.warn(`The returnVisitPercentage option must be a number between 0 and 1. You passed in ${options.returnVisitPercentage}. \nFalling back to default value.`);\n      }\n    } else {\n      adjustments.returnVisitPercentage = RETURNING_VISITOR_PERCENTAGE;\n      console.warn(`The returnVisitPercentage option must be a number. You passed in a ${typeof options.returnVisitPercentage}. \nFalling back to default value.`);\n    }\n  }\n  return adjustments;\n}\nfunction getApiRequestHeaders(comment = \"\") {\n  return { \"User-Agent\": `co2js/${\"0.14.4\"} ${comment}` };\n}\nexport {\n  formatNumber,\n  getApiRequestHeaders,\n  parseOptions\n};\n","\"use strict\";\nimport { getApiRequestHeaders } from \"./helpers/index.js\";\nfunction check(domain, userAgentIdentifier) {\n  if (typeof domain === \"string\") {\n    return checkAgainstAPI(domain, userAgentIdentifier);\n  } else {\n    return checkDomainsAgainstAPI(domain, userAgentIdentifier);\n  }\n}\nasync function checkAgainstAPI(domain, userAgentIdentifier) {\n  const req = await fetch(`https://api.thegreenwebfoundation.org/greencheck/${domain}`, {\n    headers: getApiRequestHeaders(userAgentIdentifier)\n  });\n  const res = await req.json();\n  return res.green;\n}\nasync function checkDomainsAgainstAPI(domains, userAgentIdentifier) {\n  try {\n    const apiPath = \"https://api.thegreenwebfoundation.org/v2/greencheckmulti\";\n    const domainsString = JSON.stringify(domains);\n    const req = await fetch(`${apiPath}/${domainsString}`, {\n      headers: getApiRequestHeaders(userAgentIdentifier)\n    });\n    const allGreenCheckResults = await req.json();\n    return greenDomainsFromResults(allGreenCheckResults);\n  } catch (e) {\n    return [];\n  }\n}\nfunction greenDomainsFromResults(greenResults) {\n  const entries = Object.entries(greenResults);\n  const greenEntries = entries.filter(([key, val]) => val.green);\n  return greenEntries.map(([key, val]) => val.url);\n}\nvar hosting_api_default = {\n  check\n};\nexport {\n  hosting_api_default as default\n};\n","\"use strict\";\nimport hostingAPI from \"./hosting-api.js\";\nfunction check(domain, userAgentIdentifier) {\n  return hostingAPI.check(domain, userAgentIdentifier);\n}\nvar hosting_default = {\n  check\n};\nexport {\n  hosting_default as default\n};\n","import { SUSTAINABILITY_CONTEXT, SustainabilityContext } from \"../../context/sustainability.context\";\r\nimport { UmbLitElement } from \"@umbraco-cms/backoffice/lit-element\";\r\nimport { DirectionModel } from \"@umbraco-cms/backoffice/external/backend-api\";\r\nimport { css, customElement, html, repeat, state } from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { AveragePageMetrics, PageMetric, PagedResultPageMetricModel } from \"../../api\";\r\nimport { hosting } from '@tgwf/co2';\r\n\r\nconst elementName = \"sustainability-overview-element\";\r\n@customElement(elementName)\r\nexport class SustainabilityOverviewElement extends UmbLitElement {\r\n\r\n  #sustainabilityContext?: SustainabilityContext;\r\n\r\n  @state()\r\n  _overviewData?: PagedResultPageMetricModel;\r\n\r\n  @state()\r\n  _averageData?: AveragePageMetrics;\r\n\r\n  @state()\r\n  _greenHost?: Boolean | undefined = undefined;\r\n  \r\n  constructor() {\r\n    super();\r\n\r\n    this.consumeContext(SUSTAINABILITY_CONTEXT, (instance) => {\r\n      this.#sustainabilityContext = instance;\r\n\r\n      this.observe(this.#sustainabilityContext.overviewData, (data) => {\r\n        if (!data) return;\r\n        this._overviewData = data;\r\n      });\r\n\r\n      this.observe(this.#sustainabilityContext.averageData, (data) => {\r\n        if (!data) return;\r\n        this._averageData = data;\r\n      })\r\n    });\r\n  }\r\n  \r\n  async connectedCallback() {\r\n    super.connectedCallback();\r\n\r\n    if (this.#sustainabilityContext != null) {\r\n      await this.#sustainabilityContext.getOverviewData(DirectionModel.DESCENDING, \"RequestDate\", 1, 10);\r\n      await this.#sustainabilityContext.getAverageData();\r\n    }\r\n\r\n    hosting.check(window.location.hostname, 'Test').then((result: boolean) => {\r\n      this._greenHost = result;\r\n    })\r\n  }\r\n\r\n  #renderNoResults() {\r\n    if (this._overviewData?.items.length === 0) {\r\n      return html`\r\n        <uui-box>\r\n          No data to show yet. Once you've run some tests, you'll see an overview of all your data here.\r\n        </uui-box>\r\n      `\r\n    }\r\n  }\r\n\r\n\r\n  #renderResults() {\r\n    if (this._overviewData?.items.length !== 0) {\r\n      return html`\r\n      <div id=\"left-column\">\r\n        <uui-box>\r\n          <uui-table style=\"margin-bottom: 24px;\">\r\n            <uui-table-head>\r\n              <uui-table-head-cell></uui-table-head-cell>\r\n              <uui-table-head-cell>Last Run Date</uui-table-head-cell>\r\n              <uui-table-head-cell>Carbon Rating</uui-table-head-cell>\r\n            </uui-table-head>\r\n\r\n            ${repeat(\r\n              this._overviewData.items,\r\n              (item: PageMetric) => item,\r\n              (item: PageMetric) => html`\r\n                <uui-table-row>\r\n                  <uui-table-cell>\r\n                    <a href='/umbraco/section/content/workspace/document/edit/${item.nodeKey}'>\r\n                      ${item.nodeName}\r\n                    </a>\r\n                  </uui-table-cell>\r\n                  <uui-table-cell>\r\n                    ${item.requestDate}\r\n                  </uui-table-cell>\r\n                  <uui-table-cell>\r\n                    <uui-tag>\r\n                      ${item.carbonRating}\r\n                    </uui-tag>\r\n                  </uui-table-cell>\r\n                </uui-table-row>\r\n                `\r\n            )}\r\n          </uui-table>\r\n\r\n          <uui-button look=\"primary\" href=\"/umbraco#sustainability/sustainability/stats\">\r\n            See more data\r\n          </uui-button>\r\n        </uui-box>\r\n        </div>\r\n      `\r\n    }\r\n  }\r\n\r\n  #renderGreenHostingValue() {\r\n    if (this._greenHost === undefined) {\r\n      return html`\r\n        <p style=\"margin: 0;\">Loading...</p>\r\n      `\r\n    }\r\n    else if (this._greenHost === false) {\r\n      return html`\r\n        <p style=\"margin: 0;\">No</p>\r\n      `\r\n    }\r\n    else return html`\r\n      <p style=\"margin: 0;\">Yes</p>\r\n    `\r\n  }\r\n\r\n  #renderGreenHosting() {\r\n    return html`\r\n    <uui-box headline=\"Green hosting\" style=\"margin-bottom: var(--uui-size-space-4);\">\r\n      <div slot=\"header\">Powered by <a href=\"https://www.thegreenwebfoundation.org/co2-js/\" target=\"_blank\">CO2.js</a></div>\r\n      ${this.#renderGreenHostingValue()}\r\n    </uui-box>\r\n    `\r\n  }\r\n\r\n  #renderSidebar() {\r\n    if (this._overviewData?.items.length !== 0) {\r\n      return html`\r\n        <div id=\"right-column\">\r\n          ${this.#renderGreenHosting()}\r\n\r\n          <uui-box headline=\"Average carbon rating\" style=\"margin-bottom: var(--uui-size-space-4);\">\r\n            <uui-tag>\r\n              ${this._averageData?.carbonRating}\r\n            </uui-tag>\r\n          </uui-box>\r\n\r\n          <uui-box headline=\"Average page size\" style=\"margin-bottom: var(--uui-size-space-4);\">\r\n            ${(this._averageData?.pageSize / 1024).toFixed(2)}KB\r\n          </uui-box>\r\n\r\n          <uui-box headline=\"Average CO₂ per page view\">\r\n            ${this._averageData?.emissions.toFixed(4)}g\r\n          </uui-box>\r\n\r\n        </div>\r\n      `\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n      <umb-body-layout headline=\"Overview\">\r\n        <div id=\"main\">\r\n          ${this.#renderNoResults()}     \r\n          ${this.#renderResults()}   \r\n          ${this.#renderSidebar()}  \r\n        </div>\r\n      </umb-body-layout>\r\n    `;\r\n  }\r\n\r\n  static styles = [\r\n    css`\r\n      #main {\r\n        display: grid;\r\n        gap: var(--uui-size-layout-1);\r\n        /* padding: var(--uui-size-layout-1); */\r\n        grid-template-columns: 1fr 350px;\r\n      }\r\n    `\r\n  ]\r\n}\r\n\r\nexport default SustainabilityOverviewElement;\r\n"],"names":["getApiRequestHeaders","comment","check","domain","userAgentIdentifier","checkAgainstAPI","checkDomainsAgainstAPI","domains","apiPath","domainsString","allGreenCheckResults","greenDomainsFromResults","greenResults","key","val","hosting_api_default","hostingAPI","hosting_default","_sustainabilityContext","_renderNoResults","renderNoResults_fn","_renderResults","renderResults_fn","_renderGreenHostingValue","renderGreenHostingValue_fn","_renderGreenHosting","renderGreenHosting_fn","_renderSidebar","renderSidebar_fn","elementName","SustainabilityOverviewElement","UmbLitElement","__privateAdd","SUSTAINABILITY_CONTEXT","instance","__privateSet","__privateGet","data","DirectionModel","hosting","result","html","__privateMethod","_a","repeat","item","_b","_c","_d","css","__decorateClass","state","customElement","SustainabilityOverviewElement$1"],"mappings":"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","x_google_ignoreList":[0,1,2]}