/* tslint:disable */
/* eslint-disable */
/**
 * Sustainability API
 * Umbraco.Community.Sustainability
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExternalResourceGroupResourcesInner } from './ExternalResourceGroupResourcesInner';
import {
    ExternalResourceGroupResourcesInnerFromJSON,
    ExternalResourceGroupResourcesInnerFromJSONTyped,
    ExternalResourceGroupResourcesInnerToJSON,
} from './ExternalResourceGroupResourcesInner';
import type { ResourceGroupType } from './ResourceGroupType';
import {
    ResourceGroupTypeFromJSON,
    ResourceGroupTypeFromJSONTyped,
    ResourceGroupTypeToJSON,
} from './ResourceGroupType';

/**
 * 
 * @export
 * @interface ExternalResourceGroup
 */
export interface ExternalResourceGroup {
    /**
     * 
     * @type {ResourceGroupType}
     * @memberof ExternalResourceGroup
     */
    type: ResourceGroupType;
    /**
     * 
     * @type {string}
     * @memberof ExternalResourceGroup
     */
    name?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ExternalResourceGroup
     */
    totalSize: number;
    /**
     * 
     * @type {Array<ExternalResourceGroupResourcesInner>}
     * @memberof ExternalResourceGroup
     */
    resources?: Array<ExternalResourceGroupResourcesInner> | null;
}

/**
 * Check if a given object implements the ExternalResourceGroup interface.
 */
export function instanceOfExternalResourceGroup(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "totalSize" in value;

    return isInstance;
}

export function ExternalResourceGroupFromJSON(json: any): ExternalResourceGroup {
    return ExternalResourceGroupFromJSONTyped(json, false);
}

export function ExternalResourceGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExternalResourceGroup {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': ResourceGroupTypeFromJSON(json['type']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'totalSize': json['totalSize'],
        'resources': !exists(json, 'resources') ? undefined : (json['resources'] === null ? null : (json['resources'] as Array<any>).map(ExternalResourceGroupResourcesInnerFromJSON)),
    };
}

export function ExternalResourceGroupToJSON(value?: ExternalResourceGroup | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': ResourceGroupTypeToJSON(value.type),
        'name': value.name,
        'totalSize': value.totalSize,
        'resources': value.resources === undefined ? undefined : (value.resources === null ? null : (value.resources as Array<any>).map(ExternalResourceGroupResourcesInnerToJSON)),
    };
}

